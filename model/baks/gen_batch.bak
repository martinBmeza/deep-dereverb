import numpy as np
import librosa
import soundfile as sf 
import pandas as pd
import glob

EPS = np.finfo(float).eps

def get_audio_list(path, file_types = ('.wav', '.WAV', '.flac', '.FLAC')):
    search_path = path + '/**/*'
    audio_list = []
    for file_type in file_types:
        audio_list.extend(glob.glob(search_path+file_type, recursive=True))
    return audio_list

def normalise(array):
        norm_array = (array - array.min()) / (array.max() - array.min() + EPS)
        return norm_array
 

def audio_chunk(paths, win_size=32640, hop_size=32640):
    """Recibe un path de audio y devuelve el path, los puntos de comienzo
	y final para recortar el audio, y la frecuencia de sampleo."""
    clean_path = paths[0]
    reverb_path = paths[1]
  
    nframes = sf.info(clean_path, verbose = True).frames
    
    start = np.array(range(0,nframes-win_size,hop_size), dtype='int32')
    end = start + win_size
    return  clean_path, reverb_path, start, end

def speech_dataframe(clean_path, reverb_path):
    clean_list = get_audio_list(clean_path)
    clean_list.sort()

    reverb_list = get_audio_list(reverb_path)
    reverb_list.sort()

    audio_list = [[clean_list[i], reverb_list[i]] for i in range(len(clean_list))]

    dicts = [{'clean_path':audio[0],'reverb_path':audio[1],\
            'start': audio[2],'end':audio[3]}\
             for audio in map(audio_chunk, audio_list)]

    df_speech = pd.concat(map(pd.DataFrame, dicts), axis=0, ignore_index = True)
    
    return df_speech

def gen_stft(dataframe, ID):
    clean_path = dataframe.iat[ID, 0]
    reverb_path = dataframe.iat[ID, 1]
    start, end = dataframe.iat[ID, 2], dataframe.iat[ID, 3]

    clean, _ = sf.read(clean_path, start=start, stop=end)
    reverb, _ = sf.read(reverb_path, start=start, stop=end)

    #Genero las STFT
    stft_clean = librosa.stft(clean, n_fft=512, hop_length=128)[:-1,:]# Descarto altas frecuencias
    stft_clean = np.abs(stft_clean)
    stft_reverb = librosa.stft(reverb, n_fft=512, hop_length=128)[:-1,:]
    stft_reverb = np.abs(stft_reverb)

    #Escala logaritmica
    log_stft_clean = librosa.amplitude_to_db(stft_clean)
    log_stft_reverb = librosa.amplitude_to_db(stft_reverb)

    #Normalizacion
    norm_stft_reverb = normalise(log_stft_reverb)
    norm_stft_clean = normalise(log_stft_clean)
    return norm_stft_reverb, norm_stft_clean
